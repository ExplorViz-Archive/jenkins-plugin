##
## Part of ExplorViz/jenkins-plugin
##
## This file contains default/base properties for dynamically generated kieker monitoring configurations.
##
## It is taken from a Kieker 1.14 nightly release example file.
## Irrelevant entries have been removed and some entries have been reordered for better readability.
##

###########################
#######   GENERAL   #######
###########################

## The name of the Kieker instance.
kieker.monitoring.name=KIEKER

## Whether a debug mode is activated.
## This changes a few internal id generation mechanisms to enable
## easier debugging. Additionally, it is possible to enable debug
## logging in the settings of the used logger.
## This setting should usually not be set to true.
kieker.monitoring.debug=false

## Enable/disable monitoring after startup (true|false; default: true)
## If monitoring is disabled, the MonitoringController simply pauses.
## Furthermore, probes should stop collecting new data and monitoring
## writers stop should stop writing existing data.
kieker.monitoring.enabled=true

## The name of the VM running Kieker. If empty the name will be determined
## automatically, else it will be set to the given value.
kieker.monitoring.hostname=

## The name of application running Kieker. If empty the name will will be empty too
kieker.monitoring.applicationName=

## The initial ID associated with all experiments. (currently not used)
kieker.monitoring.initialExperimentId=1

## Automatically add a metadata record to the monitoring log when writing
## the first monitoring record. The metadata record contains infromation
## on the configuration of the monitoring controller.
kieker.monitoring.metadata=false

## Enables/disable the automatic assignment of each record's logging timestamp.
## (true|false; default: true)
kieker.monitoring.setLoggingTimestamp=true

## Whether a shutdown hook should be registered.
## This ensures that necessary cleanup steps are finished and no
## information is lost due to asynchronous writers.
## This should usually not be set to false.
kieker.monitoring.useShutdownHook=true

## Whether any JMX functionality is available
kieker.monitoring.jmx=false

## The size of the thread pool used to execute registered periodic sensor jobs.
## The thread pool is also used to periodically read the config file for adaptive
## monitoring.
## Set to 0 to deactivate scheduling.
kieker.monitoring.periodicSensorsExecutorPoolSize=1

## Enable or disable adaptive monitoring.
kieker.monitoring.adaptiveMonitoring.enabled=false

## Default location of the adaptive monitoring configuration File
kieker.monitoring.adaptiveMonitoring.configFile=META-INF/kieker.monitoring.adaptiveMonitoring.conf

## Enable/disable the updating of the pattern file by activating or deactivating
## probes through the api.
kieker.monitoring.adaptiveMonitoring.updateConfigFile=false

## The delay in seconds in which the pattern file is checked for changes.
## Requires kieker.monitoring.periodicSensorsExecutorPoolSize > 0.
## Set to 0 to disable the observation.
kieker.monitoring.adaptiveMonitoring.readInterval=30

## The maximal size of the signature cache. This is a weak limit, as the cache can exceed this size
## slightly in practical application.
## Set to -1 for an unbounded cache.
kieker.monitoring.adaptiveMonitoring.maxCacheSize=-1

## The behaviour of the signature cache, if the maximal size is bounded.
## 0: The cache ignores entries once the maximal size is reached.
## 1: The cache removes a (semi)random entry from the cache once the maximal size is exceeded.
## 2: The cache is completely cleared once the maximal size is reached.
kieker.monitoring.adaptiveMonitoring.boundedCacheBehaviour=0

## The internal synchronized queue implementation to use.
## It must provide a constructor with a single int parameter which represents the queue's (initial) capacity.
## org.jctools.queues.MpscArrayQueue
## java.util.concurrent.LinkedBlockingQueue
## java.util.concurrent.ArrayBlockingQueue
kieker.monitoring.core.controller.WriterController.RecordQueueFQN=org.jctools.queues.MpscArrayQueue

## This parameter defines the synchronized queue's (initial) capacity in terms of the number of records.
## Note that the actual capacity can be increased depending on the used queue implementation.
kieker.monitoring.core.controller.WriterController.RecordQueueSize=10000

## 0: terminate Monitoring with an error (default)
## 1: writer blocks until queue capacity is available
## 2: writer discards new records until space is available
##  Be careful when using the value '1' since then, the asynchronous writer
##  is no longer decoupled from the monitored application.
# important setting for non-blocking monitoring, if explorviz backend is down
kieker.monitoring.core.controller.WriterController.RecordQueueInsertBehavior=2


###########################
#######    TIMER    #######
###########################

#kieker.monitoring.timer=kieker.monitoring.timer.SystemMilliTimer
kieker.monitoring.timer.SystemMilliTimer.offset=0
kieker.monitoring.timer.SystemMilliTimer.unit=2

kieker.monitoring.timer=kieker.monitoring.timer.SystemNanoTimer
kieker.monitoring.timer.SystemNanoTimer.offset=0
kieker.monitoring.timer.SystemNanoTimer.unit=0


###########################
#######    WRITER   #######
###########################
## Enable only one of kieker.monitoring.writer

#####
#kieker.monitoring.writer=kieker.monitoring.writer.dump.DumpWriter


#####
#kieker.monitoring.writer=kieker.monitoring.writer.namedRecordPipe.PipeWriter

## The name of the pipe used (must not be empty).
kieker.monitoring.writer.namedRecordPipe.PipeWriter.pipeName=kieker-pipe


#####
#kieker.monitoring.writer=kieker.monitoring.writer.tcp.TCPWriter

## The hostname the TCPWriter connects to.
kieker.monitoring.writer.tcp.TCPWriter.hostname=localhost

## The ports the TCPWriter connects to.
kieker.monitoring.writer.tcp.TCPWriter.port1=10133
kieker.monitoring.writer.tcp.TCPWriter.port2=10134

## The size of the buffer used by the TCPWriter in bytes.
## Should be large enough to fit at least one single monitoring record (> 1KiB).
kieker.monitoring.writer.tcp.TCPWriter.bufferSize=65535

## The size of the string registry buffer used by the TCPWriter in bytes.
## Should be large enough to fit at least one single string registry record (>= 1KiB).
kieker.monitoring.writer.tcp.TCPWriter.stringRegistryBufferSize=1024

## Should each record be immediately sent?
kieker.monitoring.writer.tcp.TCPWriter.flush=false


#####
#kieker.monitoring.writer=kieker.monitoring.writer.tcp.DualSocketTcpWriter

## The hostname the DualSocketTcpWriter connects to.
kieker.monitoring.writer.tcp.DualSocketTcpWriter.hostname=localhost

## The ports the DualSocketTcpWriter connects to.
kieker.monitoring.writer.tcp.DualSocketTcpWriter.port1=10133
kieker.monitoring.writer.tcp.DualSocketTcpWriter.port2=10134

## The size of the buffer used by the DualSocketTcpWriter in bytes.
## Should be large enough to fit at least single string records (> 1KiB).
kieker.monitoring.writer.tcp.DualSocketTcpWriter.bufferSize=65535

## Should each record be immediately sent?
kieker.monitoring.writer.tcp.DualSocketTcpWriter.flush=false


#####
#kieker.monitoring.writer=kieker.monitoring.writer.tcp.SingleSocketTcpWriter

## The hostname the SingleSocketTcpWriter connects to.
kieker.monitoring.writer.tcp.SingleSocketTcpWriter.hostname=localhost

## The ports the SingleSocketTcpWriter connects to.
kieker.monitoring.writer.tcp.SingleSocketTcpWriter.port=10133

## The size of the buffer used by the SingleSocketTcpWriter in bytes.
## Should be large enough to fit at least single string records (> 1KiB).
kieker.monitoring.writer.tcp.SingleSocketTcpWriter.bufferSize=1024

## Should each record be immediately sent?
kieker.monitoring.writer.tcp.SingleSocketTcpWriter.flush=true


#####
#kieker.monitoring.writer=kieker.monitoring.writer.explorviz.ExplorVizTcpWriter

## The hostname the ExplorVizExportWriter connects to.
kieker.monitoring.writer.explorviz.ExplorVizTcpWriter.hostname=localhost

## The ports the TCPWriter connects to.
kieker.monitoring.writer.explorviz.ExplorVizTcpWriter.port=10133

## The size of the buffer used by the TCPWriter in bytes.
## Should be large enough to fit at least single string records (> 1KiB).
kieker.monitoring.writer.explorviz.ExplorVizTcpWriter.bufferSize=65535

## Should each record be immediately sent?
kieker.monitoring.writer.explorviz.ExplorVizTcpWriter.flush=false


#####
kieker.monitoring.writer=kieker.monitoring.writer.FileWriter

## In order to use a custom directory, set customStoragePath as desired.
## Examples: /var/kieker or C:\\KiekerData (ensure the folder exists).
## Otherwise the default temporary directory will be used.
kieker.monitoring.writer.filesystem.FileWriter.customStoragePath=

## Charset to use for text serialization (default UTF-8)
kieker.monitoring.writer.filesystem.FileWriter.charsetName=UTF-8

## The maximal number of entries (records) per created file.
## Must be greater than zero.
kieker.monitoring.writer.filesystem.FileWriter.maxEntriesInFile=25000

## The maximal file size of the generated monitoring log. Older files will be
## deleted if this file size is exceeded. Given in MiB.
## At least one file will always remain, regardless of size!
## Use -1 to ignore this functionality.
kieker.monitoring.writer.filesystem.FileWriter.maxLogSize=-1

## The maximal number of log files generated. Older files will be
## deleted if this number is exceeded.
## At least one file will always remain, regardless of size!
## Use -1 to ignore this functionality.
kieker.monitoring.writer.filesystem.FileWriter.maxLogFiles=-1

## Handler for the map file, default TextMapFileHandler
kieker.monitoring.writer.filesystem.FileWriter.mapFileHandler=kieker.monitoring.writer.filesystem.TextMapFileHandler

## When flushing is disabled, it could require a lot of records before
## finally any writing to the map file is done.
kieker.monitoring.writer.filesystem.TextMapFileHandler.flush=true

## Set compression for TextMapFileHandler (compression not supported yet)
kieker.monitoring.writer.filesystem.TextMapFileHandler.compression=kieker.monitoring.writer.compression.NoneCompressionFilter

## Log stream handler, default RotatingLogFilePoolHandler
kieker.monitoring.writer.filesystem.FileWriter.logFilePoolHandler=kieker.monitoring.writer.filesystem.RotatingLogFilePoolHandler

## Log stream handler, default TextLogStreamHandler (text serialization)
kieker.monitoring.writer.filesystem.FileWriter.logStreamHandler=kieker.monitoring.writer.filesystem.TextLogStreamHandler
# kieker.monitoring.writer.filesystem.FileWriter.logStreamHandler=kieker.monitoring.writer.filesystem.BinaryLogStreamHandler

## When flushing is disabled, it could require a lot of records before
## finally any writing to the log file(s) is done.
kieker.monitoring.writer.filesystem.FileWriter.flush=false

## When flushing is disabled, records are buffered in memory before written.
## This setting configures the size of the used buffer in bytes.
kieker.monitoring.writer.filesystem.BinaryFileWriter.bufferSize=8192

## When compression is enabled, each log file is written as zipped binary file.
kieker.monitoring.writer.filesystem.BinaryFileWriter.compression=kieker.monitoring.writer.filesystem.compression.NoneCompressionFilter
