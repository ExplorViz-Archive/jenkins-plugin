package net.explorviz.jenkins;

import hudson.FilePath;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.Properties;

/**
 * Represents kiekers monitoring configuration, specified via
 * <pre>
 *     -Dkieker.monitoring.configuration=file.properties
 * </pre>
 * Can be used to generate such a file dynamically.
 * <p>
 * Backed by a {@link Properties} implementation that can be accessed directly using {@link #getProperties()}.
 *
 * TODO: Replace with kieker.common.configuration.Configuration or use as backend.
 */
public final class KiekerMonitoringConfiguration implements Serializable {
    private static final long serialVersionUID = -4029425118671759708L;

    private static final String DEFAULTS_RESOURCE_NAME = "kieker.monitoring.properties";

    private final Properties properties;

    /**
     * Create a new configuration initialized with default values.
     *
     * @throws IOException When the internal defaults file cannot be read.
     */
    public KiekerMonitoringConfiguration() throws IOException {
        this.properties = new Properties();

        try (InputStream in = KiekerMonitoringConfiguration.class.getClassLoader()
            .getResourceAsStream(DEFAULTS_RESOURCE_NAME)) {
            this.properties.load(in);
        }
    }

    public void setApplicationName(String applicationName) {
        this.properties.setProperty("kieker.monitoring.applicationName", applicationName);
    }

    public String getApplicationName() {
        return this.properties.getProperty("kieker.monitoring.applicationName");
    }

    public void setOutputDirectory(String outputDirectory) {
        this.properties.setProperty("kieker.monitoring.writer.filesystem.FileWriter.customStoragePath", outputDirectory);
    }

    public String getOutputDirectory() {
        return this.properties.getProperty("kieker.monitoring.writer.filesystem.FileWriter.customStoragePath");
    }

    /**
     * @return The backing {@link Properties} implementation to store all configuration entries.
     */
    public Properties getProperties() {
        return this.properties;
    }

    /**
     * Write the current configuration to the given file.
     *
     * @param outputFile File to write to. Will be created if it doesn't exist.
     */
    public void write(FilePath outputFile) throws IOException, InterruptedException {
        try (OutputStream out = outputFile.write()) {
            properties.store(out, "This file was automatically generated by ExplorViz/jenkins-plugin.");
        }
    }
}
