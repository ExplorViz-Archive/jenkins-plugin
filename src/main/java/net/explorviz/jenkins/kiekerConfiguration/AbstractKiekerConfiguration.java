package net.explorviz.jenkins.kiekerConfiguration;

import hudson.FilePath;
import kieker.common.configuration.Configuration;
import kieker.common.configuration.ReadOnlyConfiguration;
import org.apache.commons.lang.Validate;

import javax.annotation.Nonnull;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * Represents kiekers monitoring configuration, specified via
 * <pre>
 *     -Dkieker.monitoring.configuration=file.properties
 * </pre>
 * Can be used to generate such a file dynamically.
 * <p>
 * Backed by a kieker {@link Configuration} that can be accessed directly using {@link #getConfiguration()}.
 */
public abstract class AbstractKiekerConfiguration implements KiekerConfiguration {
    private static final long serialVersionUID = 1157219098873045113L;

    private static final String BASE_RESOURCE_NAME = "kieker.monitoring.properties";

    public static final String PROPS_PREFIX = "kieker.monitoring.";

    public static final String PROP_WRITER = PROPS_PREFIX + "writer";

    private static final String PROP_APPLICATIONNAME = PROPS_PREFIX + "applicationName"; // default: empty
    private static final String PROP_AUTO_TIMESTAMPS = PROPS_PREFIX + "setLoggingTimestamp"; // default: true

    protected final Configuration configuration;

    /**
     * Create a new configuration initialized with default values.
     *
     * @param writerClass The canonical class name of the writer
     *
     * @throws IOException When the internal defaults file cannot be read.
     */
    protected AbstractKiekerConfiguration(@Nonnull String writerClass) throws IOException {
        Validate.notEmpty(writerClass, "writerClass may not be empty");

        this.configuration = new Configuration();

        // Load the properties from our file. Do not specify them as defaults instead, as defaults won't be stored
        try (InputStream in = AbstractKiekerConfiguration.class.getClassLoader()
            .getResourceAsStream(BASE_RESOURCE_NAME)) {
            this.configuration.load(in);
        }

        this.configuration.setProperty(PROP_WRITER, writerClass);
    }

    public void setApplicationName(@Nonnull String applicationName) {
        Validate.notNull(applicationName, "applicationName may not be null");
        this.configuration.setProperty(PROP_APPLICATIONNAME, applicationName);
    }

    public String getApplicationName() {
        return this.configuration.getStringProperty(PROP_APPLICATIONNAME);
    }

    public void setAutoTimestamps(boolean autoTimestamps) {
        this.configuration.setProperty(PROP_AUTO_TIMESTAMPS, autoTimestamps);
    }

    public boolean getAutoTimestamps() {
        return this.configuration.getBooleanProperty(PROP_AUTO_TIMESTAMPS);
    }

    @SuppressWarnings("AssignmentOrReturnOfFieldWithMutableType")
    public Configuration getConfiguration() {
        return configuration;
    }

    public Configuration readOnlyConfiguration() {
        return new ReadOnlyConfiguration(configuration);
    }

    public void write(FilePath outputFile) throws IOException, InterruptedException {
        try (OutputStream out = outputFile.write()) {
            configuration.store(out, "This file was automatically generated by ExplorViz/jenkins-plugin.");
        }
    }
}
